
set(TRIDOT_DIRECTORY "../..")
set(TRIDOT_PROJECT_NAME "Template")
set(TRIDOT_BUILD_FROM_SOURCE true)
set(TRIDOT_BUILD_INPLACE false)


cmake_minimum_required(VERSION 3.0)
set(CMAKE_CXX_STANDARD 20)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
if(TRIDOT_BUILD_INPLACE)
    get_filename_component(TRIDOT_BINARY_SUB_FOLDER "${CMAKE_CURRENT_BINARY_DIR}" NAME)
    set(TRIDOT_BINARY_DIRECTORY "../${TRIDOT_DIRECTORY}/${TRIDOT_BINARY_SUB_FOLDER}")
    add_subdirectory(${TRIDOT_DIRECTORY} ${TRIDOT_BINARY_DIRECTORY})
else()
    add_subdirectory(${TRIDOT_DIRECTORY} ${CMAKE_CURRENT_BINARY_DIR}/tridot)
endif()

if(WIN32)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
    set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
    set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR})
    set(CMAKE_DEBUG_POSTFIX "")
    set(CMAKE_RELWITHDEBINFO_POSTFIX "")
    set(USE_MSVC_RUNTIME_LIBRARY_DLL 1)
endif()

project(${TRIDOT_PROJECT_NAME})
file(GLOB_RECURSE SOURCES src/*)
add_library(${PROJECT_NAME} SHARED ${SOURCES})
target_include_directories(${PROJECT_NAME} PUBLIC src ${TRIDOT_DIRECTORY}/src)
target_link_libraries(${PROJECT_NAME} PUBLIC Tridot)
add_custom_command(
    TARGET ${PROJECT_NAME} PRE_LINK
    COMMAND ${CMAKE_COMMAND} -E touch "${TRIDOT_PROJECT_NAME}.dll"
    COMMAND ${CMAKE_COMMAND} -E rename "${TRIDOT_PROJECT_NAME}.dll" "junk_${TRIDOT_PROJECT_NAME}.dll"
)

add_dependencies(TridotEditor ${TRIDOT_PROJECT_NAME})
add_dependencies(TridotLauncher ${TRIDOT_PROJECT_NAME})